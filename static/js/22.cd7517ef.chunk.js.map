{"version":3,"sources":["pages/Restaurants/Restaurants.tsx","contentful/useRestaurants.ts"],"names":["Restaurants","restaurantDetails","useState","loading","restaurants","restaurantsData","setRestaurantsData","useEffect","CONTENTFUL_CLIENT","getEntries","content_type","then","response","items","map","item","restaurantName","fields","address","website","priority","sort","useRestaurants","layoutStore","useLayout","restaurantsArray","DynamicContent","showLocaleSwitch","className","index","key","title","hoverable","href","target","rel","window","location","colorScheme","showFaces","share","width"],"mappings":"yPAyCeA,UAhCe,WAC5B,IAAMC,ECGsB,WAAwB,IAAD,EACHC,mBAA0B,CACpEC,SAAS,EACTC,YAAa,KAHgC,mBAC1CC,EAD0C,KACzBC,EADyB,KAoCjD,OA9BAC,qBAAU,WAYNC,IAAkBC,WAXJ,CACVC,aAAc,eAWbC,MAAK,SAACC,GACH,IAAMR,EAAcQ,EAASC,MACxBC,KAAI,SAACC,GACF,MAAO,CACHC,eAAgBD,EAAKE,OAAOD,eAC5BE,QAASH,EAAKE,OAAOC,QACrBC,QAASJ,EAAKE,OAAOE,QACrBC,SAAUL,EAAKE,OAAOG,aAE3BC,MAAK,uBAAGD,SAAH,EAAoBA,YAChCd,EAAmB,CACfH,SAAS,EACTC,qBAGb,IAEIC,EDvCiBiB,GACpBC,EAAcC,YAAU,cAC1BC,EAAmBxB,EAAkBG,YACzC,OACE,oCACE,kBAAC,IAAD,KACE,mFAEF,kBAACsB,EAAA,EAAD,CAAgBH,YAAaA,EAAaI,kBAAkB,IAJ9D,IAKE,kBAAC,IAAD,KACE,mDAEF,yBAAKC,UAAU,eACZH,EAAiBX,KAAI,SAACC,EAAMc,GAC3B,OACE,kBAAC,IAAD,CAAMC,IAAKD,EAAOE,MAAO,4BAAKhB,EAAKC,gBAAsBgB,WAAW,GAClE,4BAAKjB,EAAKG,SACV,uBAAGe,KAAMlB,EAAKI,QAASe,OAAO,SAASC,IAAI,uBACxCpB,EAAKI,aAKd,yBAAKS,UAAU,MACb,kBAAC,OAAD,CAAMK,KAAMG,OAAOC,SAASJ,KAAMK,YAAY,OAAOC,WAAS,EAACC,OAAK,IACpE,kBAAC,WAAD,CAAUC,MAAM,OAAOR,KAAMG,OAAOC,SAASJ","file":"static/js/22.cd7517ef.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useRestaurants } from \"../../contentful/useRestaurants\";\r\nimport { Divider, Card } from \"antd\";\r\nimport { Comments, Like } from \"react-facebook\";\r\nimport DynamicContent from \"../../components/DynamicContent/DynamicContent\";\r\nimport { useLayout } from \"../../contentful/useLayout\";\r\nimport \"./Restaurants.scss\";\r\nimport { Helmet } from \"react-helmet-async\";\r\n\r\nconst Restaurants: React.FC = () => {\r\n  const restaurantDetails = useRestaurants();\r\n  const layoutStore = useLayout(\"RESTAURANT\");\r\n  let restaurantsArray = restaurantDetails.restaurants;\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>Restaurants in Hamburg - Kerala Samajam Hamburg</title>\r\n      </Helmet>\r\n      <DynamicContent layoutStore={layoutStore} showLocaleSwitch={false} />;\r\n      <Divider>\r\n        <h3>Indian Restaurants</h3>\r\n      </Divider>\r\n      <div className=\"restaurants\">\r\n        {restaurantsArray.map((item, index) => {\r\n          return (\r\n            <Card key={index} title={<h3>{item.restaurantName}</h3>} hoverable={true}>\r\n              <h4>{item.address}</h4>\r\n              <a href={item.website} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                {item.website}\r\n              </a>\r\n            </Card>\r\n          );\r\n        })}\r\n        <div className=\"fb\">\r\n          <Like href={window.location.href} colorScheme=\"dark\" showFaces share />\r\n          <Comments width=\"100%\" href={window.location.href} />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Restaurants;\r\n","import { useEffect, useState } from \"react\";\r\nimport { CONTENTFUL_CLIENT } from \"./index\";\r\n\r\ninterface RestaurantStore {\r\n    loading: boolean;\r\n    restaurants: {\r\n        restaurantName: string;\r\n        address: string;\r\n        website: string;\r\n        priority: number\r\n    }[];\r\n}\r\n\r\nexport const useRestaurants = (): RestaurantStore => {\r\n    const [restaurantsData, setRestaurantsData] = useState<RestaurantStore>({\r\n        loading: true,\r\n        restaurants: [],\r\n    });\r\n\r\n    useEffect(() => {\r\n        const query = {\r\n            content_type: \"restaurant\",\r\n        };\r\n\r\n        type ExpectedOutput = {\r\n            restaurantName: string;\r\n            address: string;\r\n            website: string;\r\n            priority: number\r\n        };\r\n\r\n        CONTENTFUL_CLIENT.getEntries<ExpectedOutput>(query)\r\n            .then((response) => {\r\n                const restaurants = response.items\r\n                    .map((item) => {\r\n                        return {\r\n                            restaurantName: item.fields.restaurantName,\r\n                            address: item.fields.address,\r\n                            website: item.fields.website,\r\n                            priority: item.fields.priority,\r\n                        };\r\n                    }).sort(({ priority: a }, { priority: b }) => a - b);\r\n                setRestaurantsData({\r\n                    loading: false,\r\n                    restaurants,\r\n                });\r\n            });\r\n    }, []);\r\n\r\n    return restaurantsData;\r\n};\r\n"],"sourceRoot":""}