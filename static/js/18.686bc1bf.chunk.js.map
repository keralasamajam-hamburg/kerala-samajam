{"version":3,"sources":["contentful/index.ts","pages/Gallery/GalleryItem.tsx","pages/Gallery/Gallery.tsx","contentful/useGalleries.ts"],"names":["CONTENTFUL_CLIENT","contentful","space","accessToken","GalleryItem","gallery","useState","images","id","currentImageId","setCurrentImageId","className","name","dots","lazyLoad","dotPosition","arrows","beforeChange","currentSlide","nextSlide","prevArrow","LeftOutlined","nextArrow","RightOutlined","map","img","style","display","position","src","url","alt","description","href","window","location","colorScheme","showFaces","share","bordered","Panel","header","key","forceRender","width","Gallery","galleriesData","loading","galleries","setGalleries","useEffect","getEntries","content_type","order","then","response","galleriesMapped","items","collection","fields","title","sys","postedBy","file","useGalleries","Spinner","index"],"mappings":"yHAAA,sCAEaA,EAFb,OAEiCC,EAAwB,CACvDC,MAAO,eACPC,YAAa,iD,6LCEFC,EAAmD,SAAC,GAAiB,IAAD,EAAdC,EAAc,EAAdA,QAAc,EACnCC,mBAAQ,UAACD,EAAQE,cAAT,aAAC,EAAiB,GAAGC,IADM,mBACxEC,EADwE,KACxDC,EADwD,KAK/E,OACE,yBAAKC,UAAU,gBACb,kBAAC,IAAD,KACE,4BAAKN,EAAQO,OAEf,kBAAC,IAAD,CACEC,MAAI,EACJC,SAAS,cACTC,YAAY,SACZC,QAAM,EACNC,aAboB,SAACC,EAAsBC,GAC7CT,EAAkBL,EAAQE,OAAOY,GAAWX,KAa1CY,UAAW,kBAACC,EAAA,EAAD,MACXC,UAAW,kBAACC,EAAA,EAAD,OACVlB,EAAQE,OAAOiB,KAAI,SAACC,GACnB,OACE,yBAAKC,MAAO,CAAEC,QAAS,OAAQC,SAAU,YAAcpB,GAAIH,EAAQG,GAAK,IAAMiB,EAAIjB,IAChF,yBAAKqB,IAAKJ,EAAIK,IAAKC,IAAKN,EAAIO,cAC5B,4BAAKP,EAAIO,kBAKjB,yBAAKrB,UAAU,MACb,kBAAC,OAAD,CACEsB,KAAMC,OAAOC,SAASF,KAAhB,WAA2B5B,EAAQG,IACzC4B,YAAY,OACZC,WAAS,EACTC,OAAK,IAEP,kBAAC,IAAD,CAAUC,UAAU,GAClB,kBAAC,IAASC,MAAV,CAAgBC,OAAQ,WAAYC,IAAI,IAAIC,aAAa,GACvD,kBAAC,WAAD,CAAUC,MAAM,OAAOX,KAAMC,OAAOC,SAASF,KAAhB,WAA2B5B,EAAQG,GAAK,IAAMC,U,QCbxEoC,UArBW,WACxB,IAAMC,ECUoB,WAAuB,IAAD,EACdxC,mBAAyB,CACzDyC,SAAS,EACTC,UAAW,KAHmC,mBACzCA,EADyC,KAC9BC,EAD8B,KAsChD,OAhCAC,qBAAU,WAYRlD,IAAkBmD,WALJ,CACZC,aAAc,kBACdC,MAAO,0BAG2CC,MAAK,SAACC,GACxD,IAAMC,EAAkBD,EAASE,MAAMjC,KAAI,SAACkC,GAAgB,IAAD,IACzD,MAAO,CACL9C,KAAM8C,EAAWC,OAAOC,MACxBpD,GAAIkD,EAAWG,IAAIrD,GACnBsD,SAAQ,UAAEJ,EAAWC,OAAOG,gBAApB,iBAAE,EAA4BH,cAA9B,aAAE,EAAoC/C,KAC9CL,OAAQmD,EAAWC,OAAOpD,OAAOiB,KAAI,SAACC,GAAD,cAAU,CAC7CO,YAAW,UAAEP,EAAIkC,cAAN,aAAE,EAAY3B,YACzBF,IAAG,UAAEL,EAAIkC,cAAN,aAAE,EAAYI,KAAKjC,IACtBtB,GAAIiB,EAAIoC,IAAIrD,WAIlByC,EAAa,CACXF,SAAS,EACTC,UAAWQ,SAGd,IAEIR,EDhDegB,GAEtB,OAAIlB,EAAcC,QACT,kBAACkB,EAAA,EAAD,MAIP,yBAAKtD,UAAW,WACd,kBAAC,IAAD,KACE,oEAEF,kBAAC,IAAD,KACE,wCAEDmC,EAAcE,UAAUxB,KAAI,SAACnB,EAAS6D,GACrC,OAAO,kBAAC,EAAD,CAAa7D,QAASA,EAASqC,IAAKwB","file":"static/js/18.686bc1bf.chunk.js","sourcesContent":["import * as contentful from 'contentful';\n\nexport const CONTENTFUL_CLIENT = contentful.createClient({\n  space: 'l3rza8k51j1n',\n  accessToken: 'Rf2s92FG4B9lzV78jEL-Xzqu58evFVT7o2kIRBeDCto',\n});","import { LeftOutlined, RightOutlined } from '@ant-design/icons';\nimport { Carousel, Collapse, Divider } from 'antd';\nimport React, { useState } from 'react';\nimport { Comments, Like } from 'react-facebook';\nimport { IGalleryItem } from '../../contentful/useGalleries';\n\nexport const GalleryItem: React.FC<{ gallery: IGalleryItem }> = ({ gallery }) => {\n  const [currentImageId, setCurrentImageId] = useState(gallery.images?.[0].id);\n  const handleAfterChange = (currentSlide: number, nextSlide: number) => {\n      setCurrentImageId(gallery.images[nextSlide].id)\n  };\n  return (\n    <div className=\"gallery-item\">\n      <Divider>\n        <h3>{gallery.name}</h3>\n      </Divider>\n      <Carousel\n        dots\n        lazyLoad=\"progressive\"\n        dotPosition=\"bottom\"\n        arrows\n        beforeChange={handleAfterChange}\n        prevArrow={<LeftOutlined />}\n        nextArrow={<RightOutlined />}>\n        {gallery.images.map((img) => {\n          return (\n            <div style={{ display: 'flex', position: 'relative' }} id={gallery.id + '-' + img.id}>\n              <img src={img.url} alt={img.description} />\n              <h5>{img.description}</h5>\n            </div>\n          );\n        })}\n      </Carousel>\n      <div className=\"fb\">\n        <Like\n          href={window.location.href + `#${gallery.id}`}\n          colorScheme=\"dark\"\n          showFaces\n          share\n        />\n        <Collapse bordered={false}>\n          <Collapse.Panel header={'Comments'} key=\"1\" forceRender={false}>\n            <Comments width=\"100%\" href={window.location.href + `#${gallery.id + '-' + currentImageId}`} />\n          </Collapse.Panel>\n        </Collapse>\n      </div>\n    </div>\n  );\n};\n","import { Divider } from 'antd';\r\nimport React from 'react';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport { useGalleries } from '../../contentful/useGalleries';\r\nimport './Gallery.scss';\r\nimport { GalleryItem } from './GalleryItem';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\nconst Gallery: React.FC = () => {\r\n  const galleriesData = useGalleries();\r\n\r\n  if (galleriesData.loading) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  return (\r\n    <div className={'gallery'}>\r\n      <Helmet>\r\n        <title>Gallery - Kerala Samajam Hamburg</title>\r\n      </Helmet>\r\n      <Divider>\r\n        <h2>Gallery</h2>\r\n      </Divider>\r\n      {galleriesData.galleries.map((gallery, index) => {\r\n        return <GalleryItem gallery={gallery} key={index} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default Gallery;\r\n","import { Asset, Entry } from 'contentful';\nimport { useEffect, useState } from 'react';\nimport { CONTENTFUL_CLIENT } from './index';\n\nexport interface IGalleryItem {\n  name: string;\n  id: string;\n  postedBy?: string;\n  images: {\n    description: string;\n    url: string;\n    id: string;\n  }[];\n}\ninterface GalleriesStore {\n  loading: boolean;\n  galleries: IGalleryItem[];\n}\n\nexport const useGalleries = (): GalleriesStore => {\n  const [galleries, setGalleries] = useState<GalleriesStore>({\n    loading: true,\n    galleries: [],\n  });\n\n  useEffect(() => {\n    type ExpectedOutput = {\n      title: string;\n      images: Asset[];\n      postedBy?: Entry<{ name: string }>;\n    };\n\n    const query = {\n      content_type: 'imageCollection',\n      order: '-fields.publishedDate',\n    };\n\n    CONTENTFUL_CLIENT.getEntries<ExpectedOutput>(query).then((response) => {\n      const galleriesMapped = response.items.map((collection) => {\n        return {\n          name: collection.fields.title,\n          id: collection.sys.id,\n          postedBy: collection.fields.postedBy?.fields?.name,\n          images: collection.fields.images.map((img) => ({\n            description: img.fields?.description,\n            url: img.fields?.file.url,\n            id: img.sys.id,\n          })),\n        };\n      });\n      setGalleries({\n        loading: false,\n        galleries: galleriesMapped,\n      });\n    });\n  }, []);\n\n  return galleries;\n};\n"],"sourceRoot":""}