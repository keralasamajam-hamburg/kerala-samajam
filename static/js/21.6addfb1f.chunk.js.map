{"version":3,"sources":["components/Statuses/ErrorRegistering.tsx","components/Statuses/Successful.tsx","components/Register/Register.tsx"],"names":["ErrorRegistering","message","status","title","Successful","extra","to","key","type","formItemLayout","labelCol","span","wrapperCol","Register","Form","useForm","form","useState","isLoading","setIsLoading","showSuccess","setSetShowSuccess","error","setError","className","Spinner","name","onFinish","memberData","requestOptions","method","headers","body","JSON","stringify","fetch","process","then","response","ok","resetFields","catch","json","errorJSON","initialValues","rate","Item","label","rules","required","whitespace","hasFeedback","htmlType"],"mappings":"sNAMeA,EAHgD,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAChE,OAAO,kBAAC,IAAD,CAAQC,OAAO,QAAQC,MAAOF,GAAW,iD,QCanCG,EAbc,WAC3B,OACE,kBAAC,IAAD,CACEF,OAAO,UACPC,MAAM,6EACNE,MAAO,CACL,kBAAC,IAAD,CAAMC,GAAG,IAAIC,IAAI,QACf,kBAAC,IAAD,CAAQC,KAAK,WAAb,kB,kBCJJC,EAAiB,CACrBC,SAAU,CACRC,KAAM,GAERC,WAAY,CACVD,KAAM,KA+GKE,UA3GE,WAAO,IAAD,EACNC,IAAKC,UAAbC,EADc,sBAEaC,oBAAS,GAFtB,mBAEdC,EAFc,KAEHC,EAFG,OAGoBF,oBAAS,GAH7B,mBAGdG,EAHc,KAGDC,EAHC,OAIKJ,mBAAwB,MAJ7B,mBAIdK,EAJc,KAIPC,EAJO,KA0CrB,OACE,oCACGL,GACC,yBAAKM,UAAU,mBACb,kBAACC,EAAA,EAAD,OAGJ,yBAAKD,UAAU,YACZJ,EACC,kBAAC,EAAD,MACEE,EACF,kBAAC,EAAD,CAAkBrB,QAASqB,IAE3B,kBAAC,IAAD,eACEN,KAAMA,EACNU,KAAK,kBACDjB,EAHN,CAIEkB,SArDe,SAACC,GACxBT,GAAa,GACb,IAAMU,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAUN,IAEvBO,MACEC,yEACAP,GAECQ,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAMD,EAER,OAAOA,KAERD,MAAK,WACJrB,EAAKwB,cACLrB,GAAa,GACbE,GAAkB,MAEnBoB,OAAM,SAAAnB,GACDA,EAAMoB,KACRpB,EAAMoB,OAAOL,MAAK,SAACM,GACjBpB,EAASoB,EAAUrB,OACnBH,GAAa,OAGfI,EAAS,+CACTJ,GAAa,IAEfH,EAAKwB,kBAsBDI,cAAe,CACb,eAAgB,EAChB,iBAAkB,CAAC,IAAK,IAAK,KAC7BC,KAAM,OAGR,kBAAC,IAAKC,KAAN,CACEpB,KAAK,OACLqB,MAAO,2CACPC,MAAO,CACL,CACEC,UAAU,EACVhD,QAAS,0BACTiD,YAAY,KAIhB,kBAAC,IAAD,OAEF,kBAAC,IAAKJ,KAAN,CACEpB,KAAK,QACLqB,MAAM,SACNC,MAAO,CACL,CACExC,KAAM,QACNP,QAAS,kCAEX,CACEgD,UAAU,EACVhD,QAAS,8BAGbkD,aAAW,GAEX,kBAAC,IAAD,OAEF,kBAAC,IAAKL,KAAN,CAAWtB,UAAU,UACnB,kBAAC,IAAD,CAAQhB,KAAK,UAAU4C,SAAS,UAAhC","file":"static/js/21.6addfb1f.chunk.js","sourcesContent":["import { Result } from \"antd\";\r\nimport React from \"react\";\r\n\r\nconst ErrorRegistering: React.FC<{ message: string | null }> = ({ message }) => {\r\n  return <Result status=\"error\" title={message || \"Failed to register, please try again later!\"} />;\r\n};\r\nexport default ErrorRegistering;\r\n","import React from \"react\";\r\nimport {Result, Button} from \"antd\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Successful: React.FC = () => {\r\n  return (\r\n    <Result\r\n      status=\"success\"\r\n      title=\"Thank you for contacting us. We will send the registration form by email. \"\r\n      extra={[\r\n        <Link to=\"/\" key=\"home\">\r\n          <Button type=\"primary\">Back Home</Button>\r\n        </Link>,\r\n      ]}\r\n    />\r\n  );\r\n};\r\nexport default Successful;\r\n","import {Button, Form, Input} from \"antd\";\r\nimport React, {useState} from \"react\";\r\nimport ErrorRegistering from \"../Statuses/ErrorRegistering\";\r\nimport Successful from \"../Statuses/Successful\";\r\nimport \"./Register.scss\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    span: 6,\r\n  },\r\n  wrapperCol: {\r\n    span: 14,\r\n  },\r\n};\r\n\r\nconst Register = () => {\r\n  const [form] = Form.useForm();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [showSuccess, setSetShowSuccess] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const onRegisterSubmit = (memberData: any) => {\r\n    setIsLoading(true);\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: {\"Content-Type\": \"application/json\"},\r\n      body: JSON.stringify(memberData),\r\n    };\r\n    fetch(\r\n      process.env.REACT_APP_FUNCTIONS_ENDPOINT + \"/registerUser\",\r\n      requestOptions,\r\n    )\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw response;\r\n        }\r\n        return response;\r\n      })\r\n      .then(() => {\r\n        form.resetFields();\r\n        setIsLoading(false);\r\n        setSetShowSuccess(true);\r\n      })\r\n      .catch(error => {\r\n        if (error.json) {\r\n          error.json().then((errorJSON: any) => {\r\n            setError(errorJSON.error);\r\n            setIsLoading(false);\r\n          });\r\n        } else {\r\n          setError(\"Oops something went wrong. Try again later!\");\r\n          setIsLoading(false);\r\n        }\r\n        form.resetFields();\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isLoading && (\r\n        <div className=\"spinner-overlay\">\r\n          <Spinner />\r\n        </div>\r\n      )}\r\n      <div className=\"register\">\r\n        {showSuccess ? (\r\n          <Successful />\r\n        ) : error ? (\r\n          <ErrorRegistering message={error} />\r\n        ) : (\r\n          <Form\r\n            form={form}\r\n            name=\"validate_other\"\r\n            {...formItemLayout}\r\n            onFinish={onRegisterSubmit}\r\n            initialValues={{\r\n              \"input-number\": 3,\r\n              \"checkbox-group\": [\"A\", \"B\", \"C\"],\r\n              rate: 3.5,\r\n            }}\r\n          >\r\n            <Form.Item\r\n              name=\"name\"\r\n              label={<span>Name &nbsp;</span>}\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please enter your Name!\",\r\n                  whitespace: true,\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"email\"\r\n              label=\"E-mail\"\r\n              rules={[\r\n                {\r\n                  type: \"email\",\r\n                  message: \"The input is not valid E-mail!\",\r\n                },\r\n                {\r\n                  required: true,\r\n                  message: \"Please enter your E-mail!\",\r\n                },\r\n              ]}\r\n              hasFeedback\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item className=\"submit\">\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Submit\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Register;\r\n"],"sourceRoot":""}